from typing import List, Sequence, Union

from sqlalchemy import Table
from sqlalchemy.orm.decl_api import DeclarativeMeta
from starlette.routing import Route

from .routes import scheems_route, Methods


class Scheems:
    """
    API coordinator class.

    This class *IS NOT* an ASGI application, and merely acts to coordinate
    different routes under the API generated by Scheems.
    Routes registered on instances of this class are meant to be passed to
    the [`starlette.applications.Starlette`](https://www.starlette.io/applications/)
    instance.
    """

    def __init__(self, api_root: str = "/") -> None:
        self.api_root = api_root
        self._routes: List[Route] = []

    def add_model(
        self,
        table: Union[DeclarativeMeta, Table],
        *,
        identified_by: str = None,
        methods: Sequence[Methods] = ("GET",),
        allow_bulk: bool = False,
        allowed_filters: Sequence[str] = None
    ) -> None:
        """
        Creates API routes for a model and adds them to the internal record of Routes.

        Arguments:
            table: The SQLAlchemy Table or Model for which the routes have to be defined
            identified_by: Column by which a row can be identified. If no column is specified, the primary key column is used.
                This is used for creating the `/endpoint/{identifier}` route.
            methods: Methods to be allowed on this model. Refer [HTTP Methods and Endpoints](http_methods.md)
            allow_bulk: Whether to allow operations that will retrieve/modify more than 1 record in the table.
            allowed_filters: List of column names that can be used to filter data via query parameters.
                !!! note
                    This parameter cannot be used if `allow_bulk` is set to False.
        """
        pass
